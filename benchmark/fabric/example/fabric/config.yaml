---
name: basic-network
version: 1.0.0
client:
    organization: Org1
    logging:
        level: info
    cryptoconfig:
        path: ${GOPATH}/src/github.com/meshplus/hyperbench/benchmark/fabric/example/fabric/crypto-config
    credentialStore:
        # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
        # and enrollments are performed elswhere.
        path: "/tmp/hfc-kvs"

        # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
        # requiring a key store. PKCS#11 based implementations does not.
        cryptoStore:
            # Specific to the underlying KeyValueStore that backs the crypto key store.
            path: "/tmp/hfc-msp"
    connection:
        timeout:
            peer:
                endorser: '300'
            orderer: '300'
    BCCSP:
        security:
            enabled: true
            default:
                provider: "SW"
            hashAlgorithm: "SHA2"
            softVerify: true
            level: 256

        tlsCerts:
            # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
            systemCertPool: true

            # [Optional]. Client key and cert for TLS handshake with peers and orderers
            client:
                key:
                    path: ${GOPATH}/src/github.com/meshplus/hyperbench/benchmark/fabric/example/fabric/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/server.key
                cert:
                    path: ${GOPATH}/src/github.com/meshplus/hyperbench/benchmark/fabric/example/fabric/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/server.crt

channels:
    mychannel:
        orderers:
        - orderer.example.com
        peers:
            peer0.org1.example.com: {}
organizations:
    Org1:
        mspid: Org1MSP
        cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp
        peers:
        - peer0.org1.example.com
        certificateAuthorities:
        - ca.example.com
orderers:
    orderer.example.com:
        url: grpc://localhost:7050
peers:
    peer0.org1.example.com:
        url: grpc://localhost:7051
        grpcOptions:
            ssl-target-name-override: peer0.org1.example.com
            # These parameters should be set in coordination with the keepalive policy on the server,
            # as incompatible settings can result in closing of connection.
            # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
            keep-alive-time: 0s
            keep-alive-timeout: 20s
            keep-alive-permit: false
            fail-fast: false
            # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
            allow-insecure: false

            tlsCACerts:
                # Certificate location absolute path
                path: ${GOPATH}/src/github.com/meshplus/hyperbench/benchmark/fabric/example/fabric/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

certificateAuthorities:
    ca.example.com:
        url: http://localhost:7054
        tlsCACerts:
            #   # Comma-Separated list of paths
            path: ${GOPATH}/src/github.com/meshplus/hyperbench/benchmark/fabric/example/fabric/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem
            #   # Client key and cert for SSL handshake with Fabric CA
            #   client:
            #     key:
            #       path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/fabricca/tls/certs/client/client_fabric_client-key.pem
            #     cert:
            #       path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/fabricca/tls/certs/client/client_fabric_client.pem

            # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
            # needed to enroll and invoke new users.
        registrar:
            enrollId: admin
            enrollSecret: adminpw
        caName: ca.example.com
